<html>

<head>
    <title>Game</title>
    <script>
    var ga = {
        "dom": {
            "loading": null,
            "main": null,
            "game": null
        },
        "res": {
            "total": 4,
            "loaded": 0,
            "imgs": {
                "plane": "plane.png",
                "explosion": "explosion.png"
            },
            "sounds": {
                "bullet": "bullet.mp3",
                "explosion": "explosion.mp3"
            }
        },
        "ctx": null,
        "audioCtx": null,
        "game": {
            "circle": null,
            "drawables": null,
            "plane": null
        },
        "key": {
            "left": false,
            "top": false,
            "right": false,
            "bottom": false
        }
    };
    window.onload = function() {
        // 程式初始化
        ga.ctx = document.getElementById("cvs").getContext("2d");
        ga.audioCtx = new AudioContext();
        ga.dom.loading = document.getElementById("loading");
        ga.dom.main = document.getElementById("main");
        ga.dom.game = document.getElementById("game");
        // 載入資源
        loadResources();
    };

    function loadResources() {
        loadImages();
        loadSounds();
    }

    function loadImages() {
        for (var name in ga.res.imgs) {
            loadImage(name, ga.res.imgs[name]);
        }
    }

    function loadImage(name, src) {
        var img = new Image();
        img.src = src;
        img.onload = function() {
            ga.res.imgs[name] = this;
            resourceLoaded();
        };
    }

    function loadSounds() {
        for (var name in ga.res.sounds) {
            loadSound(name, ga.res.sounds[name]);
        }
    }

    function loadSound(name, src) {
        var req = new XMLHttpRequest();
        req.open("get", src); // 設定連線方法和網址
        req.responseType = "arraybuffer"; // 設定回傳的資料型態
        req.onload = function() { // 註冊 load 事件
            ga.audioCtx.decodeAudioData(this.response, function(buffer) {
                ga.res.sounds[name] = buffer;
                resourceLoaded();
            });
        };
        req.send(); // 送出連線
    }

    function resourceLoaded() {
        ga.res.loaded++;
        ga.dom.loading.innerHTML = (100 * ga.res.loaded / ga.res.total) + "%";
        if (ga.res.loaded >= ga.res.total) {
            initMain();
        }
    }

    function initMain() {
        ga.dom.loading.style.display = "none";
        ga.dom.main.style.display = "block";
    }

    function initGame() {
        // 接收鍵盤命令
        document.addEventListener("keydown", keydown);
        document.addEventListener("keyup", keyup);
        // 準備遊戲資料
        ga.game.circle = 0;
        ga.game.drawables = [];
        ga.game.plane = new Plane();
        ga.game.drawables.push(ga.game.plane);
        ga.game.drawables.push(new BulletSystem());
        // 啟動遊戲進程
        window.setInterval(refreshGame, 20);
        // 切換介面
        ga.dom.main.style.display = "none";
        ga.dom.game.style.display = "block";
    }

    function keydown(e) {
        if (e.keyCode == 37) { // left
            ga.key.left = true;
        } else if (e.keyCode == 38) { // top
            ga.key.top = true;
        } else if (e.keyCode == 39) { // right
            ga.key.right = true;
        } else if (e.keyCode == 40) { // bottom
            ga.key.bottom = true;
        }
    }

    function keyup(e) {
        if (e.keyCode == 37) { // left
            ga.key.left = false;
        } else if (e.keyCode == 38) { // top
            ga.key.top = false;
        } else if (e.keyCode == 39) { // right
            ga.key.right = false;
        } else if (e.keyCode == 40) { // bottom
            ga.key.bottom = false;
        }
    }

    function refreshGame() {
        // 更新資料
        for (var i = 0; i < ga.game.drawables.length; i++) {
            if (ga.game.drawables[i].update()) {
                ga.game.drawables.splice(i, 1);
                i--;
            }
        }
        // 重新繪製
        ga.ctx.fillRect(0, 0, ga.ctx.canvas.width, ga.ctx.canvas.height);
        for (var i = 0; i < ga.game.drawables.length; i++) {
            ga.game.drawables[i].draw();
        }
        // 更新回合數
        ga.game.circle++;
    }

    function Plane() {
        this.x = ga.ctx.canvas.width / 2;
        this.y = ga.ctx.canvas.height / 2;
        this.speed = 2;
        this.size = 20;
        this.update = function() {
            // 根據鍵盤的狀況，移動飛機
            if (ga.key.left) {
                this.x -= this.speed;
            }
            if (ga.key.top) {
                this.y -= this.speed;
            }
            if (ga.key.right) {
                this.x += this.speed;
            }
            if (ga.key.bottom) {
                this.y += this.speed;
            }
            return false;
        };
        this.draw = function() {
            ga.ctx.save();
            ga.ctx.drawImage(ga.res.imgs.plane, this.x - this.size / 2, this.y - this.size / 2, this.size, this.size);
            ga.ctx.restore();
        };
    }

    function BulletSystem() {
        this.max = 100;
        this.freq = 2;
        this.bullets = [];
        this.update = function() {
            // 子彈總數小於最大值，每 freq 回合建立一個
            if (this.bullets.length < this.max && ga.game.circle % this.freq == 0) {
                this.bullets.push(new Bullet());
            }
            // 更新子彈資料
            for (var i = 0; i < this.bullets.length; i++) {
                if (this.bullets[i].update()) {
                    this.bullets.splice(i, 1);
                    i--;
                }
            }
            return false;
        };
        this.draw = function() {
            for (var i = 0; i < this.bullets.length; i++) {
                this.bullets[i].draw();
            }
        };
    }

    function Bullet() {
        this.x = 0;
        this.y = Math.random() * ga.ctx.canvas.height;
        this.vx = Math.random() * 2 + 1; // 1 ~ 3
        this.size = 2;
        this.update = function() {
            this.x += this.vx;
            return this.x > ga.ctx.canvas.width;
        };
        this.draw = function() {
            // 畫出白色圓形子彈
            ga.ctx.save();
            ga.ctx.beginPath();
            ga.ctx.arc(this.x, this.y, this.size, 0, 2 * Math.PI);
            ga.ctx.fillStyle = "#ffffff";
            ga.ctx.fill();
            ga.ctx.restore();
        };
    }
    </script>
</head>

<body>
    <div id="loading"></div>
    <div id="main" style="display:none">
        <button onclick="initGame();">Start</button>
    </div>
    <div id="game" style="display:none">
        <canvas id="cvs" width="600" height="450"></canvas>
    </div>
</body>

</html>
